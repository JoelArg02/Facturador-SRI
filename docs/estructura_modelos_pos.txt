Estructura modular de modelos POS (refactor 2025-09)
===================================================

Objetivo:
Dividir el antiguo archivo monolítico core/pos/models.py (≈1600+ líneas) en módulos temáticos para:
- Reducir riesgo de imports circulares
- Mejorar mantenibilidad y legibilidad
- Facilitar pruebas y extensiones futuras

Punto único de import público:
core/pos/models/__init__.py  -> Reexporta todos los modelos para mantener compatibilidad con 'from core.pos.models import ...'

Módulos creados:
1. company.py
   - Company
   - Notas: owner -> OneToOneField (cambio respecto a versión anterior). Lógica de numeración diferida (import de Receipt dentro de métodos) para evitar ciclos.

2. customer.py
   - Customer
   - Relación OneToOne con user.User; hereda TransactionSummary para consistencia de campos multi-tenant.

3. catalog.py
   - Provider, Category, Product, Receipt, ExpenseType, Expense, Promotion, PromotionDetail, ReceiptError
   - Lógica de generación de códigos de barras y promociones.

4. purchase.py
   - Purchase, PurchaseDetail
   - Cálculos de totales y recomputación.

5. accounting.py
   - AccountPayable, AccountPayablePayment, AccountReceivable, AccountReceivablePayment
   - Se removió import inexistente 'invoice_support'.

6. billing_base.py
   - TransactionSummary (abstract)
   - ElecBillingBase (abstract)
   - ElecBillingDetailBase (abstract)
   - Centraliza campos y métodos compartidos (numeración, errores, generación de documentos electrónicos).

7. invoice.py
   - Invoice, InvoiceDetail
   - Generación de XML / documentos electrónicos delegada a utilidades.

8. credit_note.py
   - CreditNote, CreditNoteDetail
   - Ajusta stock y vinculación a Invoice.

9. quotation.py
   - Quotation, QuotationDetail
   - Conversión a Invoice y envío por correo (usa PDFCreator).

Gestión de dependencias y ciclos:
- Imports diferidos dentro de métodos (por ejemplo en Company.save, Quotation.create_invoice) para evitar ciclos directos.
- __init__.py reexporta en un orden que minimiza dependencias tempranas.

Cambios relacionales destacados:
- Company.owner ahora es OneToOneField (antes ForeignKey) para garantizar un único tenant por usuario.

Impacto en migraciones:
- El simple movimiento / reorganización de archivos NO genera nuevas migraciones.
- El cambio a OneToOneField SÍ requiere migración (documentada en docs/migracion_user_company.txt).

Prácticas recomendadas futuras:
- Nuevos modelos: crear archivo separado sólo si supera ~150 líneas o introduce dependencias que puedan provocar ciclos.
- Evitar imports masivos con *; usar reexport controlado en __init__.

Checklist post-refactor (estado):
[x] Mover modelos existentes a módulos individuales
[x] Añadir Customer
[x] Añadir Quotation y detalles
[x] Actualizar __init__.py exportando nuevos modelos
[x] Documentar estructura
[ ] Ejecutar pruebas unitarias / smoke test (pendiente)
[ ] Revisar admin.py para ajustar posibles referencias a rutas de modelos (si usaba paths absolutos inusuales)

Acciones sugeridas siguientes:
- Correr: python manage.py makemigrations && python manage.py migrate (si aún no se aplicó cambio OneToOne)
- Verificar panel de admin y vistas clave (Invoice, CreditNote, Purchase) para asegurar que no hay ImportError.
- Añadir tests para Quotation -> Invoice conversion.

Fin del documento.
